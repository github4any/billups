// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package repository

import (
	"context"
)

const createScoreboard = `-- name: CreateScoreboard :exec
INSERT INTO scoreboard(results, player, computer, created_at)
VALUES ($1, $2, $3, now())
`

type CreateScoreboardParams struct {
	Results  string `json:"results"`
	Player   int32  `json:"player"`
	Computer int32  `json:"computer"`
}

func (q *Queries) CreateScoreboard(ctx context.Context, arg CreateScoreboardParams) error {
	_, err := q.exec(ctx, q.createScoreboardStmt, createScoreboard, arg.Results, arg.Player, arg.Computer)
	return err
}

const deleteScoreboard = `-- name: DeleteScoreboard :exec
DELETE FROM scoreboard
`

func (q *Queries) DeleteScoreboard(ctx context.Context) error {
	_, err := q.exec(ctx, q.deleteScoreboardStmt, deleteScoreboard)
	return err
}

const getScoreboard = `-- name: GetScoreboard :many
SELECT id, results, player, computer, created_at FROM scoreboard
ORDER BY created_at DESC LIMIT 10
`

func (q *Queries) GetScoreboard(ctx context.Context) ([]Scoreboard, error) {
	rows, err := q.query(ctx, q.getScoreboardStmt, getScoreboard)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Scoreboard
	for rows.Next() {
		var i Scoreboard
		if err := rows.Scan(
			&i.ID,
			&i.Results,
			&i.Player,
			&i.Computer,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
